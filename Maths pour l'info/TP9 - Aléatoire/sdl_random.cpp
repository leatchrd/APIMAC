#include <iostream>
#include <random>
#include <chrono>
#include <functional> // for bind

// g++ -Wall -std=c++11 stl_random.cpp

// combines :
// - generators (Objects that generate uniformly distributed numbers) 
// - and distributions (Objects that transform sequences of numbers generated by a generator into sequences of numbers that follow a specific random variable distribution, such as uniform, Normal or Binomial.)

int main()
{
  // select seed from time
  unsigned seed = std::chrono::system_clock::now().time_since_epoch().count();
  std::cout << "seed : " << seed << std::endl;


  // select a generator
  std::cout << std::endl << "std::mt19937" << std::endl;
  std::mt19937 generator(seed);
  std::cout << "min : " << generator.min() << std::endl;
  std::cout << "max : " << generator.max() << std::endl;
  for(int i=0; i<10; ++i)
    std::cout << generator() << " ";
  std::cout << std::endl;


  // uniform int distribution
  std::cout << std::endl << "uniform int distribution (1,6)" << std::endl;
  std::uniform_int_distribution<int> uniformIntDistribution(1,6);
  for(int i=0; i<10; ++i)
    std::cout << uniformIntDistribution(generator) << " ";
  std::cout << std::endl;

  // uniform real distribution
  std::cout << std::endl << "uniform real distribution (1,6)" << std::endl;
  std::uniform_real_distribution<float> uniformRealDistribution(1,6);
  for(int i=0; i<10; ++i)
    std::cout << uniformRealDistribution(generator) << " ";
  std::cout << std::endl;

  // normal distribution
  double mean = 3.0;
  double stdev = 1.5;
  std::cout << std::endl << "normal distribution (mean = " << mean << ", standard deviation = " << stdev << ")" << std::endl;
  std::normal_distribution<double> normalDistribution(mean,stdev);
  for(int i=0; i<10; ++i)
    std::cout << normalDistribution(generator) << " ";
  std::cout << std::endl;

  // poisson distribution
  int value = 3.0;
  std::cout << std::endl << "poisson distribution : " << value << std::endl;
  std::poisson_distribution<int> poissonDistribution(value);
  for(int i=0; i<10; ++i)
    std::cout << poissonDistribution(generator) << " ";
  std::cout << std::endl; 

  // practical writing for repetitions
  std::cout << std::endl << "practical writing for repetitions" << std::endl;
  auto dice = std::bind(uniformIntDistribution, generator);
  for(int i=0; i<10; ++i)
    std::cout << dice() << " ";
  std::cout << std::endl;


  return 0;
}