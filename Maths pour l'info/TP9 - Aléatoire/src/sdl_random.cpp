#include <iostream>
#include <random>
#include <chrono>
#include <functional> // for bind

// g++ -Wall -std=c++11 stl_random.cpp

// combines :
// - generators (Objects that generate uniformly distributed numbers) 
// - and distributions (Objects that transform sequences of numbers generated by a generator into sequences of numbers that follow a specific random variable distribution, such as uniform, Normal or Binomial.)

double pi()
{
  int rep = 1000000;
  double a = 1;

  unsigned int nb_disq = 0;
  unsigned int nb_total = 0;
  
  double x = 0;
  double y = 0;

  unsigned seed = std::chrono::system_clock::now().time_since_epoch().count();
  std::mt19937 generator(seed);
  std::uniform_real_distribution<double> uniformIntDistribution(0,a);

  for(int i = 0; i < rep; i++)
  {
    if (std::pow(uniformIntDistribution(generator),2) + std::pow(uniformIntDistribution(generator),2) <= std::pow(a,2))
      nb_disq += 1;

    nb_total += 1;
  }

  double pi = (4*nb_disq)/double(nb_total);
  std::cout << "pi = " << pi << std::endl << std::endl;

  return pi;
}

void fight(std::vector<int> deA, std::vector<int> deB)
{
  int lance = 100000;

  unsigned seed = std::chrono::system_clock::now().time_since_epoch().count();
  std::mt19937 generator(seed);
  std::uniform_int_distribution<int> uniformIntDistribution(1,6);

  unsigned int win_deA = 0;
  unsigned int win_deB = 0;

  for (int i = 0; i < lance; i++)
  {
    if(deA[uniformIntDistribution(generator)] > deB[uniformIntDistribution(generator)])
      win_deA += 1;
    else
      win_deB += 1;
    
  }

std::cout << "result dice A : " << win_deA << std::endl;
std::cout << "result dice B : " << win_deB << std::endl << std::endl;
}

int main()
{
  /*
  // select seed from time
  unsigned seed = std::chrono::system_clock::now().time_since_epoch().count();
  std::cout << "seed : " << seed << std::endl;


  // select a generator
  std::cout << std::endl << "std::mt19937" << std::endl;
  std::mt19937 generator(seed);
  std::cout << "min : " << generator.min() << std::endl;
  std::cout << "max : " << generator.max() << std::endl;
  for(int i=0; i<10; ++i)
    std::cout << generator() << " ";
  std::cout << std::endl;


  // uniform int distribution
  std::cout << std::endl << "uniform int distribution (1,6)" << std::endl;
  std::uniform_int_distribution<int> uniformIntDistribution(1,6);
  for(int i=0; i<10; ++i)
    std::cout << uniformIntDistribution(generator) << " ";
  std::cout << std::endl;

  // uniform real distribution
  std::cout << std::endl << "uniform real distribution (1,6)" << std::endl;
  std::uniform_real_distribution<float> uniformRealDistribution(1,6);
  for(int i=0; i<10; ++i)
    std::cout << uniformRealDistribution(generator) << " ";
  std::cout << std::endl;

  // normal distribution
  double mean = 3.0;
  double stdev = 1.5;
  std::cout << std::endl << "normal distribution (mean = " << mean << ", standard deviation = " << stdev << ")" << std::endl;
  std::normal_distribution<double> normalDistribution(mean,stdev);
  for(int i=0; i<10; ++i)
    std::cout << normalDistribution(generator) << " ";
  std::cout << std::endl;

  // poisson distribution
  int value = 3.0;
  std::cout << std::endl << "poisson distribution : " << value << std::endl;
  std::poisson_distribution<int> poissonDistribution(value);
  for(int i=0; i<10; ++i)
    std::cout << poissonDistribution(generator) << " ";
  std::cout << std::endl; 

  // practical writing for repetitions
  std::cout << std::endl << "practical writing for repetitions" << std::endl;
  auto dice = std::bind(uniformIntDistribution, generator);
  for(int i=0; i<10; ++i)
    std::cout << dice() << " ";
  std::cout << std::endl;
  */
 
  // pi test
  pi();

  // combat dÃ©s
  std::vector<int> de1 = {3,3,3,3,3,6};
  std::vector<int> de2 = {2,2,2,5,5,5};
  std::vector<int> de3 = {1,4,4,4,4,4};

  std::cout << "Combat de 1 vs de 2" << std::endl;
  fight(de1, de2);
  std::cout << "Combat de 2 vs de 3" << std::endl;
  fight(de2, de3);
  std::cout << "Combat de 3 vs de 1" << std::endl;
  fight(de3, de1);

  return 0;
}